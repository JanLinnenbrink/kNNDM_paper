ggplot2::geom_vline(xintercept=0, lwd = 0.1) +
ggplot2::geom_hline(yintercept=0, lwd = 0.1) +
ggplot2::geom_hline(yintercept=1, lwd = 0.1) +
ggplot2::stat_ecdf(geom = "step", lwd = 1) +
ggplot2::scale_colour_manual(values=c("#000000", "#E69F00", "#56B4E9"),
labels=c(expression(hat(G)[ij](r)),
expression(hat(G)[j]^"*"*"(r,L)"),
expression(hat(G)[j](r)))) +
ggplot2::ylab(expression(paste(hat(G)[ij](r), ", ",
hat(G)[j]^"*"*"(r,L)", ", ",
hat(G)[j](r))))
} else if (isTRUE(overlay)) {
ggplot2::ggplot(data=Gplot, ggplot2::aes_string(x="r", group="Function", col="Function", size="Function")) +
ggplot2::geom_vline(xintercept=0, lwd = 0.1) +
ggplot2::geom_hline(yintercept=0, lwd = 0.1) +
ggplot2::geom_hline(yintercept=1, lwd = 0.1) +
ggplot2::stat_ecdf(geom = "step") +
ggplot2::scale_size_manual(values = c(1,1,0.5)) +
ggplot2::scale_colour_manual(values=c("#000000", "#E69F00", "#56B4E9"),
labels=c(expression(hat(G)[ij](r)),
expression(hat(G)[j]^"*"*"(r,L)"),
expression(hat(G)[j](r)))) +
ggplot2::ylab(expression(paste(hat(G)[ij](r), ", ",
hat(G)[j]^"*"*"(r,L)", ", ",
hat(G)[j](r))))
}
}
dist_rand <- plot.knndm(rand_dist, overlay = TRUE) +
annotate(geom="text",x=11.4^6,y=0.4, label=lab_rand, colour="black",hjust = 0, size=4)+
scale_x_continuous(limits=c(0,max(dist_knndm$data$r))) +
theme_bw() +
theme(legend.position = NaN, aspect.ratio = 1)
legend_bottom <- get_legend(dist_rand +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom"))
top_row <- plot_grid(dist_rand,dist_knndm)
sla_dens <- cowplot::plot_grid(top_row, NULL, legend_bottom, NULL, nrow=4,
rel_heights = c(1,-0.2,0.5,-0.1))
sla_map_rand <- ggplot() +
geom_spatraster(data=sla_map, aes(alpha=after_stat(value)), show.legend = FALSE) +
scale_alpha_manual(values=c(0,1)) +
geom_sf(data=sla, size=0.2, color=sla_rand) +
theme_minimal()+
ggtitle("random 10-fold CV") +
theme(plot.title = element_text(face="bold", size = 14, hjust = 0.5))
sla_map_knndm <- ggplot() +
geom_spatraster(data=sla_map, aes(alpha=after_stat(value)), show.legend = FALSE) +
scale_alpha_manual(values=c(0,1)) +
geom_sf(data=sla, size=0.2, color=sla_kndm$clusters) +
theme_minimal()+
ggtitle("kNNDM 4-fold CV") +
theme(plot.title = element_text(face="bold", size = 14, hjust = 0.5))
maps <- plot_grid(sla_map_rand, sla_map_knndm, nrow=1)
bp <- plot_grid(NULL, maps, NULL, sla_dens, NULL, nrow=5,
rel_heights = c(-0.3,1,-0.3,0.5,0))
ggsave("figures/6_sla_distances.png",bp, height=6, width=10)
print(sla_kndm$W)
print(rand_dist$W)
0.8:05.
0.8:0.5
sla_kndm_k <- lapply(k_s, function(x) knndm(sla,ppoints=ppoints,k=x,maxp=0.8,clustering="hierarchical"))
# run kNNDM to obtain folds
k_s = 2:10
sla_kndm_k <- lapply(k_s, function(x) knndm(sla,ppoints=ppoints,k=x,maxp=0.8,clustering="hierarchical"))
ppoints
ppoints
#
#Reproduce study specific leaf area
setwd("C:/git/kNNDM_paper/")
library(caret)
library(CAST)
library(sf)
library(terra)
library(dplyr)
library("cowplot")
source("./code/case_study/reproduce_utils.R")
# load training points
sla <- st_read("data/case_study/sla.gpkg")
trainDat <- st_drop_geometry(sla) |>
dplyr::select(-coord.ID)
# load prediction points
ppoints <- st_read("data/case_study/ppoints.gpkg")
# train model
hyperparameter = expand.grid(mtry = 3,
splitrule = "variance",
min.node.size = 5)
predictor_names <- c("B5","EVIstd","B6","EVImax","alt","B2", "bio3",
"bio19","B4","bio4","bio9","B7","NDWIstd", "B3","bio6")
# run kNNDM to obtain folds
k_s = 2:10
sla_kndm_k <- lapply(k_s, function(x) knndm(sla,ppoints=ppoints,k=x,maxp=0.8,clustering="hierarchical"))
library("ggplot2")
library("cowplot")
library("rnaturalearth")
library("dplyr")
library("CAST")
library("tidyterra")
library("terra")
library("sf")
source("code/figures_utils.R")
sla <- st_read("data/case_study/sla.gpkg")
sla_kndm <- readRDS("results/sla_knndm.RDS")
sla_rand <- readRDS("results/folds_rand.RDS")
rand_dist <- readRDS("results/rand_dist.RDS")
err_knndm <- readRDS("results/err_knndm.RDS")
err_rand <- readRDS("results/err_rand.RDS")
sla_map <- rast("C:/git/SLA_1km_v1.tif") |> terra::aggregate(10)
sla_map[sla_map>0] <- 1
sla_map[sla_map <= 0] <- 0
cls <- data.frame(id=0:1, value=c("masked", "not_masked"))
levels(sla_map) <- cls
lab_knndm <- bquote(
atop(textstyle(RMSE == .(round(err_knndm[[1]],2))),
atop(textstyle(R^2 == .(round(err_knndm[[2]],2))),
atop(scriptscriptstyle(""),textstyle(MAE == .(round(err_knndm[[3]],2)))))))
lab_rand <- bquote(
atop(textstyle(RMSE == .(round(err_rand[[1]],2))),
atop(textstyle(R^2 == .(round(err_rand[[2]],2))),
atop(scriptscriptstyle(""),textstyle(MAE == .(round(err_rand[[3]],2)))))))
dist_knndm <- plot.knndm(sla_kndm) +
annotate(geom="text",x=11.4^6,y=0.4, label=lab_knndm, colour="black",hjust = 0, size=4)+
theme_bw() +
theme(legend.position = NaN, aspect.ratio = 1)
# run kNNDM to obtain folds
library("future")
library("future.apply")
plan(multisession)
sla_kndm_k <- future_lapply(k_s, function(x) knndm(sla,ppoints=ppoints,k=x,maxp=0.8,clustering="hierarchical"))
plan(multisession, workers = 10)
sla_kndm_k <- future_lapply(k_s, function(x) knndm(sla,ppoints=ppoints,k=x,maxp=0.8,clustering="hierarchical"))
sla_kndm_k
lapply(sla_kndm_k, function(x) x$W)
unlist(lapply(sla_kndm_k, function(x) x$W))
k_sel_idx <- min(unlist(lapply(sla_kndm_k, function(x) x$W)))
k_sel_idx
k_sel_idx <- which.min(unlist(lapply(sla_kndm_k, function(x) x$W)))
k_sel_idx
k_sel <- k_s[[k_sel_idx]]
sla_kndm <- knndm(sla, ppoints = ppoints, k=k_sel, maxp=0.8, clustering = "hierarchical")
sla_kndm <- sla_kndm_k[[k_sel_idx]]
plot(sla_kndm)
sla_kndm
plot.knndm(sla_kndm)
#' Function to plot ECDFs of Gi, Gij and Gij*
#' @details
#' see CAST (https://github.com/HannaMeyer/CAST/blob/master/R/plot.R)
#' @param x kNNDM-object.
#' @param overlay are two lines overlaying?
plot.knndm <- function(x, overlay=FALSE, ...){
# Prepare data for plotting: Gij function
Gij_df <- data.frame(r=x$Gij[order(x$Gij)])
Gij_df$Function <- "1_Gij(r)"
# Prepare data for plotting: Gjstar function
Gjstar_df <- data.frame(r=x$Gjstar[order(x$Gjstar)])
Gjstar_df$Function <- "2_Gjstar(r)"
# Prepare data for plotting: G function
Gj_df <- data.frame(r=x$Gj[order(x$Gj)])
Gj_df$Function <- "3_Gj(r)"
# Merge data for plotting
Gplot <- rbind(Gij_df, Gjstar_df, Gj_df)
# Plot
if (isFALSE(overlay)) {
ggplot2::ggplot(data=Gplot, ggplot2::aes_string(x="r", group="Function", col="Function")) +
ggplot2::geom_vline(xintercept=0, lwd = 0.1) +
ggplot2::geom_hline(yintercept=0, lwd = 0.1) +
ggplot2::geom_hline(yintercept=1, lwd = 0.1) +
ggplot2::stat_ecdf(geom = "step", lwd = 1) +
ggplot2::scale_colour_manual(values=c("#000000", "#E69F00", "#56B4E9"),
labels=c(expression(hat(G)[ij](r)),
expression(hat(G)[j]^"*"*"(r,L)"),
expression(hat(G)[j](r)))) +
ggplot2::ylab(expression(paste(hat(G)[ij](r), ", ",
hat(G)[j]^"*"*"(r,L)", ", ",
hat(G)[j](r))))
} else if (isTRUE(overlay)) {
ggplot2::ggplot(data=Gplot, ggplot2::aes_string(x="r", group="Function", col="Function", size="Function")) +
ggplot2::geom_vline(xintercept=0, lwd = 0.1) +
ggplot2::geom_hline(yintercept=0, lwd = 0.1) +
ggplot2::geom_hline(yintercept=1, lwd = 0.1) +
ggplot2::stat_ecdf(geom = "step") +
ggplot2::scale_size_manual(values = c(1,1,0.5)) +
ggplot2::scale_colour_manual(values=c("#000000", "#E69F00", "#56B4E9"),
labels=c(expression(hat(G)[ij](r)),
expression(hat(G)[j]^"*"*"(r,L)"),
expression(hat(G)[j](r)))) +
ggplot2::ylab(expression(paste(hat(G)[ij](r), ", ",
hat(G)[j]^"*"*"(r,L)", ", ",
hat(G)[j](r))))
}
}
plot.knndm(sla_kndm)
sla_kndm$W
sla_kndm[[1]]$W
unlist(lapply(sla_kndm_k, function(x) x$W))
k_sel_idx
sla_kndm_k
plot(sla_kndm_k[[9]])
sla_kndm <- knndm(sla,ppoints=ppoints,maxp=0.8,clustering="hierarchical")
sla_kndm
# reproduce model with those folds
model_knndm <- train_model(sla, predictors = predictor_names,
response = "SLA",folds = sla_kndm$clusters,
hyperparameter = hyperparameter)
err_knndm <- global_validation(model_knndm)
# reproduce model with those folds
model_knndm <- train_model(training_samples=sla, predictors = predictor_names,
response = "SLA",folds = sla_kndm$clusters,
hyperparameter = hyperparameter)
err_knndm <- global_validation(model_knndm)
err_knndm
saveRDS(err_knndm,"results/err_knndm.RDS")
saveRDS(model_knndm, "results/sla_model_knndm.RDS")
library("ggplot2")
library("cowplot")
library("rnaturalearth")
library("dplyr")
library("CAST")
library("tidyterra")
library("terra")
library("sf")
source("code/figures_utils.R")
sla <- st_read("data/case_study/sla.gpkg")
sla_kndm <- readRDS("results/sla_knndm.RDS")
sla_rand <- readRDS("results/folds_rand.RDS")
rand_dist <- readRDS("results/rand_dist.RDS")
err_knndm <- readRDS("results/err_knndm.RDS")
err_rand <- readRDS("results/err_rand.RDS")
sla_map <- rast("C:/git/SLA_1km_v1.tif") |> terra::aggregate(10)
sla_map[sla_map>0] <- 1
sla_map[sla_map <= 0] <- 0
cls <- data.frame(id=0:1, value=c("masked", "not_masked"))
levels(sla_map) <- cls
lab_knndm <- bquote(
atop(textstyle(RMSE == .(round(err_knndm[[1]],2))),
atop(textstyle(R^2 == .(round(err_knndm[[2]],2))),
atop(scriptscriptstyle(""),textstyle(MAE == .(round(err_knndm[[3]],2)))))))
lab_rand <- bquote(
atop(textstyle(RMSE == .(round(err_rand[[1]],2))),
atop(textstyle(R^2 == .(round(err_rand[[2]],2))),
atop(scriptscriptstyle(""),textstyle(MAE == .(round(err_rand[[3]],2)))))))
dist_knndm <- plot.knndm(sla_kndm) +
annotate(geom="text",x=11.4^6,y=0.4, label=lab_knndm, colour="black",hjust = 0, size=4)+
theme_bw() +
theme(legend.position = NaN, aspect.ratio = 1)
dist_rand <- plot.knndm(rand_dist, overlay = TRUE) +
annotate(geom="text",x=11.4^6,y=0.4, label=lab_rand, colour="black",hjust = 0, size=4)+
scale_x_continuous(limits=c(0,max(dist_knndm$data$r))) +
theme_bw() +
theme(legend.position = NaN, aspect.ratio = 1)
legend_bottom <- get_legend(dist_knndm +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom"))
top_row <- plot_grid(dist_rand,dist_knndm)
sla_dens <- cowplot::plot_grid(top_row, NULL, legend_bottom, NULL, nrow=4,
rel_heights = c(1,-0.2,0.5,-0.1))
sla_map_rand <- ggplot() +
geom_spatraster(data=sla_map, aes(alpha=after_stat(value)), show.legend = FALSE) +
scale_alpha_manual(values=c(0,1)) +
geom_sf(data=sla, size=0.2, color=sla_rand) +
theme_minimal()+
ggtitle("random 10-fold CV") +
theme(plot.title = element_text(face="bold", size = 14, hjust = 0.5))
sla_map_knndm <- ggplot() +
geom_spatraster(data=sla_map, aes(alpha=after_stat(value)), show.legend = FALSE) +
scale_alpha_manual(values=c(0,1)) +
geom_sf(data=sla, size=0.2, color=sla_kndm$clusters) +
theme_minimal()+
ggtitle("kNNDM 4-fold CV") +
theme(plot.title = element_text(face="bold", size = 14, hjust = 0.5))
maps <- plot_grid(sla_map_rand, sla_map_knndm, nrow=1)
bp <- plot_grid(NULL, maps, NULL, sla_dens, NULL, nrow=5,
rel_heights = c(-0.3,1,-0.3,0.5,0))
ggsave("figures/6_sla_distances.png",bp, height=6, width=10)
print(sla_kndm$W)
print(rand_dist$W)
sla_kndm
sla_kndm <- knndm(sla,ppoints=ppoints,maxp=0.8,clustering="hierarchical")
saveRDS(sla_kndm,"results/sla_knndm.RDS")
library("ggplot2")
library("cowplot")
library("rnaturalearth")
library("dplyr")
library("CAST")
library("tidyterra")
library("terra")
library("sf")
source("code/figures_utils.R")
sla <- st_read("data/case_study/sla.gpkg")
sla_kndm <- readRDS("results/sla_knndm.RDS")
sla_rand <- readRDS("results/folds_rand.RDS")
rand_dist <- readRDS("results/rand_dist.RDS")
err_knndm <- readRDS("results/err_knndm.RDS")
err_rand <- readRDS("results/err_rand.RDS")
sla_map <- rast("C:/git/SLA_1km_v1.tif") |> terra::aggregate(10)
sla_map[sla_map>0] <- 1
sla_map[sla_map <= 0] <- 0
cls <- data.frame(id=0:1, value=c("masked", "not_masked"))
levels(sla_map) <- cls
lab_knndm <- bquote(
atop(textstyle(RMSE == .(round(err_knndm[[1]],2))),
atop(textstyle(R^2 == .(round(err_knndm[[2]],2))),
atop(scriptscriptstyle(""),textstyle(MAE == .(round(err_knndm[[3]],2)))))))
lab_rand <- bquote(
atop(textstyle(RMSE == .(round(err_rand[[1]],2))),
atop(textstyle(R^2 == .(round(err_rand[[2]],2))),
atop(scriptscriptstyle(""),textstyle(MAE == .(round(err_rand[[3]],2)))))))
dist_knndm <- plot.knndm(sla_kndm) +
annotate(geom="text",x=11.4^6,y=0.4, label=lab_knndm, colour="black",hjust = 0, size=4)+
theme_bw() +
theme(legend.position = NaN, aspect.ratio = 1)
dist_rand <- plot.knndm(rand_dist, overlay = TRUE) +
annotate(geom="text",x=11.4^6,y=0.4, label=lab_rand, colour="black",hjust = 0, size=4)+
scale_x_continuous(limits=c(0,max(dist_knndm$data$r))) +
theme_bw() +
theme(legend.position = NaN, aspect.ratio = 1)
legend_bottom <- get_legend(dist_knndm +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom"))
top_row <- plot_grid(dist_rand,dist_knndm)
sla_dens <- cowplot::plot_grid(top_row, NULL, legend_bottom, NULL, nrow=4,
rel_heights = c(1,-0.2,0.5,-0.1))
sla_map_rand <- ggplot() +
geom_spatraster(data=sla_map, aes(alpha=after_stat(value)), show.legend = FALSE) +
scale_alpha_manual(values=c(0,1)) +
geom_sf(data=sla, size=0.2, color=sla_rand) +
theme_minimal()+
ggtitle("random 10-fold CV") +
theme(plot.title = element_text(face="bold", size = 14, hjust = 0.5))
sla_map_knndm <- ggplot() +
geom_spatraster(data=sla_map, aes(alpha=after_stat(value)), show.legend = FALSE) +
scale_alpha_manual(values=c(0,1)) +
geom_sf(data=sla, size=0.2, color=sla_kndm$clusters) +
theme_minimal()+
ggtitle("kNNDM 4-fold CV") +
theme(plot.title = element_text(face="bold", size = 14, hjust = 0.5))
maps <- plot_grid(sla_map_rand, sla_map_knndm, nrow=1)
bp <- plot_grid(NULL, maps, NULL, sla_dens, NULL, nrow=5,
rel_heights = c(-0.3,1,-0.3,0.5,0))
ggsave("figures/6_sla_distances.png",bp, height=6, width=10)
print(sla_kndm$W)
print(rand_dist$W)
sla_map_rand <- ggplot() +
geom_spatraster(data=sla_map, aes(alpha=after_stat(value)), show.legend = FALSE) +
scale_alpha_manual(values=c(0,1)) +
geom_sf(data=sla, size=0.2, color=sla_rand) +
theme_minimal()+
ggtitle("random 10-fold CV") +
theme(plot.title = element_text(face="bold", size = 14, hjust = 0.5))
sla_map_knndm <- ggplot() +
geom_spatraster(data=sla_map, aes(alpha=after_stat(value)), show.legend = FALSE) +
scale_alpha_manual(values=c(0,1)) +
geom_sf(data=sla, size=0.2, color=sla_kndm$clusters) +
theme_minimal()+
ggtitle("kNNDM 10-fold CV") +
theme(plot.title = element_text(face="bold", size = 14, hjust = 0.5))
maps <- plot_grid(sla_map_rand, sla_map_knndm, nrow=1)
bp <- plot_grid(NULL, maps, NULL, sla_dens, NULL, nrow=5,
rel_heights = c(-0.3,1,-0.3,0.5,0))
ggsave("figures/6_sla_distances.png",bp, height=6, width=10)
# Prepare simulation results as in de Bruin et al.
library(sf)
library(raster)
library(ggpubr)
setwd("C:/0_Msc_Loek/Z_Palma/deBruin_add_nndm/")
infolder  <- "./CVresults"
outfolder <- "./material"
mets <- c("exhaustive", "heteroscedastic", "intensity", "modelbased","random", "spatial", "knndm_sample", "knndm_sample_2")
colnms <- c("method", "variate", "design", "number", "RMSE", "MEC", "time","WS")
outtab <- data.frame(matrix(NA, 0, 8))
names(outtab) <- colnms
for(m in mets){
p <- file.path(infolder, m)
f_ins <- list.files(p, glob2rx("???_*.Rdata"))
for(f_in in f_ins){
lchar <- nchar(f_in)
variate <- substr(f_in, 1, 3)
design <- substr(f_in, 5, lchar-9)
number <- as.numeric(substr(f_in, lchar-8, lchar-6))
load(file.path(p, f_in))
if(m == "modelbased" | m == "heteroscedastic"){
MEC    <- mean(MECs)
RMSE   <- mean(RMSEs)
} else{
if(length(MEC) > 1){
MEC  <- mean(MEC)
RMSE <- mean(RMSE)
}
}
if (m == "exhaustive") WS=time = 0
newrow <- data.frame(method = m, variate = variate, design = design,
number = number, RMSE = RMSE, MEC = MEC, time=time,WS=WS)
outtab <- rbind(outtab, newrow)
}
}
outtab$methodID <- with(outtab, ifelse(method=="exhaustive",0,1))
# relative RMSE & MEC
outtab$rRMSE <- NA
outtab$rMEC  <- NA
# some rows missing in exhaustive method for OCS data
numbers <- outtab[outtab$variate == "OCS" & outtab$method=="exhaustive" & outtab$design=="clusterGapped",]$number
outtab <- outtab[outtab$number %in% numbers, ]
for(variate in c("AGB", "OCS")){
for(design in unique(outtab$design)){
for(number in numbers){
idx1 <- which(outtab$design == design & outtab$variate == variate &
outtab$number == number)
idx2 <- which(outtab$design == design & outtab$variate == variate &
outtab$methodID == 0 & outtab$number == number)
outtab$rRMSE[idx1] <- 100 * (outtab$RMSE[idx1] - outtab$RMSE[idx2])/
outtab$RMSE[idx2]
outtab$rMEC[idx1] <- 100 * (outtab$MEC[idx1] - outtab$MEC[idx2])/
outtab$MEC[idx2]
}
}
}
write.csv(outtab, file.path(outfolder, "outtab_2.csv"))
outfolder <- "C:/0_Msc_Loek/Z_Palma/deBruin_add_nndm/material/"
outtab <- read.csv(file.path(outfolder, "outtab_2.csv"))
outtab$design <- factor(outtab$design, levels=c("regular", "simpleRandom", "clusterMedium",
"clusterStrong", "clusterGapped"))
outtab$variate <- as.factor(outtab$variate)
outtab$method <- factor(outtab$method, levels = c("random","spatial","heteroscedastic","intensity",
"modelbased","knndm_sample", "knndm_sample_4","exhaustive"))
collabs <- c("SRS","reg","clustMed","clustStr","clustGap")
#
library("ggplot2")
library("ggthemes")
library("cowplot")
lw <- 0.6
w <- 0.45
base.size <- 15
(diff_rmse <- ggplot(outtab[outtab$methodID!=0 & outtab$method!="knndm_sample",],
aes(x=design, y=rRMSE,colour=method)) +
geom_boxplot(fill=NA, lwd=lw, width=w,position=position_dodge(0.6), outlier.shape = NA) +
scale_color_colorblind(name="CV method") +
scale_x_discrete(labels=collabs) +
scale_y_continuous(limits=c(-60,60), breaks=seq(-60,60,20)) +
geom_hline(aes(yintercept=0)) +
xlab("") +
ylab(expression(CV - true~RMSE~"[%]")) +
theme_bw(base_size = base.size) +
theme(legend.position = "None") +
facet_wrap(~variate) )
(diff_mec <- ggplot(outtab[outtab$methodID!=0 & outtab$method!="knndm_sample",],
aes(x=design, y=rMEC,colour=method)) +
geom_boxplot(fill=NA, lwd=lw, width=w,position=position_dodge(0.6), outlier.shape = NA) +
scale_color_colorblind(name="CV method") +
scale_x_discrete(labels=collabs) +
scale_y_continuous(limits=c(-40,40), breaks=seq(-40,40,20)) +
geom_hline(aes(yintercept=0)) +
xlab("") +
ylab(expression(CV - true~MEC~"[%]")) +
theme_bw(base_size = base.size) +
theme(legend.position = "None") +
facet_wrap(~variate) )
legend_bottom <- get_legend(diff_mec +
guides(color = guide_legend(nrow = 2)) +
theme(legend.position = "bottom"))
pgr <- plot_grid(diff_rmse, diff_mec, legend_bottom,
nrow=3, rel_heights = c(1,1,0.5), axis="l", align = "v")
ggsave("figures/5_results_sim_deBruin2.pdf", pgr, height=8, width=10)
outfolder <- "C:/0_Msc_Loek/Z_Palma/deBruin_add_nndm/material/"
outtab <- read.csv(file.path(outfolder, "outtab_2.csv"))
outtab
outtab$design <- factor(outtab$design, levels=c("regular", "simpleRandom", "clusterMedium",
"clusterStrong", "clusterGapped"))
outtab$variate <- as.factor(outtab$variate)
outfolder <- "C:/0_Msc_Loek/Z_Palma/deBruin_add_nndm/material/"
outtab <- read.csv(file.path(outfolder, "outtab_2.csv"))
outtab$design <- factor(outtab$design, levels=c("regular", "simpleRandom", "clusterMedium",
"clusterStrong", "clusterGapped"))
outtab$variate <- as.factor(outtab$variate)
outtab$method <- factor(outtab$method, levels = c("random","spatial","heteroscedastic","intensity",
"modelbased","knndm_sample", "knndm_sample_2","exhaustive"))
collabs <- c("SRS","reg","clustMed","clustStr","clustGap")
#
library("ggplot2")
library("ggthemes")
library("cowplot")
lw <- 0.6
w <- 0.45
base.size <- 15
(diff_rmse <- ggplot(outtab[outtab$methodID!=0 & outtab$method!="knndm_sample",],
aes(x=design, y=rRMSE,colour=method)) +
geom_boxplot(fill=NA, lwd=lw, width=w,position=position_dodge(0.6), outlier.shape = NA) +
scale_color_colorblind(name="CV method") +
scale_x_discrete(labels=collabs) +
scale_y_continuous(limits=c(-60,60), breaks=seq(-60,60,20)) +
geom_hline(aes(yintercept=0)) +
xlab("") +
ylab(expression(CV - true~RMSE~"[%]")) +
theme_bw(base_size = base.size) +
theme(legend.position = "None") +
facet_wrap(~variate) )
(diff_mec <- ggplot(outtab[outtab$methodID!=0 & outtab$method!="knndm_sample",],
aes(x=design, y=rMEC,colour=method)) +
geom_boxplot(fill=NA, lwd=lw, width=w,position=position_dodge(0.6), outlier.shape = NA) +
scale_color_colorblind(name="CV method") +
scale_x_discrete(labels=collabs) +
scale_y_continuous(limits=c(-40,40), breaks=seq(-40,40,20)) +
geom_hline(aes(yintercept=0)) +
xlab("") +
ylab(expression(CV - true~MEC~"[%]")) +
theme_bw(base_size = base.size) +
theme(legend.position = "None") +
facet_wrap(~variate) )
legend_bottom <- get_legend(diff_mec +
guides(color = guide_legend(nrow = 2)) +
theme(legend.position = "bottom"))
pgr <- plot_grid(diff_rmse, diff_mec, legend_bottom,
nrow=3, rel_heights = c(1,1,0.5), axis="l", align = "v")
ggsave("figures/5_results_sim_deBruin2.pdf", pgr, height=8, width=10)
