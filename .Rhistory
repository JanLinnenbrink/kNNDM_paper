kndm_ctrl <- trainControl(method="cv",
index=ctrl$index,
indexOut=ctrl$indexOut,
savePredictions=TRUE)
kndm_out_mod <- suppressWarnings( # train() can't compute R2
train(form, data=traindf, method="rf",
trControl=kndm_ctrl, tuneGrid=pgrid, ntree=100))
kndm_stats <- kndm_out_mod$pred %>%
summarise(RMSE = sqrt(mean((obs-pred)^2)),
MAE = mean(abs(obs-pred)),
R2 = cor(obs, pred)^2)
names(kndm_stats) <- paste0(names(kndm_stats), "_kndm")
kndm_stats
}
kndm_stats_diff <- data.frame(
RMSE_surf = surf_stats$RMSE_surf, R2_surf = surf_stats$R2_surf, MAE_surf = surf_stats$MAE_surf,
RMSE_kndm = kndm_stats$RMSE_kndm, R2_kndm = kndm_stats$R2_kndm, MAE_kndm = kndm_stats$MAE_kndm)
kndm_stats_diff
}
#### Model fitting and validation
mod <- fitval_rf_species(form,
folds_kndm$clusters,
pgrid, train_data,
grid_data)
mod_all <- cbind(mod, data.frame(WS=folds_kndm$W))
# Store results of the iteration
res_it <- cbind(data.frame(dsample=dist_it, stringsAsFactors = FALSE),
mod_all)
res <- bind_rows(res, res_it)
res
mod_all
dist_it <- "sclust"
# Simulate sampling points according to parameters and constraints
train_points <- sim2_samples(100, dist_it, sampling_area)
# kndm
folds_kndm <- knndmW(train_points, ppoints = ppoints, clustering = "kmeans", k=10, maxp=0.5)
#### Model fitting and validation
mod <- fitval_rf_species(form,
folds_kndm$clusters,
pgrid, train_data,
grid_data)
kndm_stats <- lapply(kndm_folds$clusters, function(x) {
fdf <- data.frame(f=x)
ctrl <- CAST::CreateSpacetimeFolds(fdf, spacevar=1, k = max(fdf))
kndm_ctrl <- trainControl(method="cv",
index=ctrl$index,
indexOut=ctrl$indexOut,
savePredictions=TRUE)
kndm_out_mod <- suppressWarnings( # train() can't compute R2
train(form, data=traindf, method="rf",
trControl=kndm_ctrl, tuneGrid=pgrid, ntree=100))
kndm_stats <- kndm_out_mod$pred %>%
summarise(RMSE = sqrt(mean((obs-pred)^2)),
MAE = mean(abs(obs-pred)),
R2 = cor(obs, pred)^2)
names(kndm_stats) <- paste0(names(kndm_stats), "_kndm")
kndm_stats
})
kndm_folds
kndm_folds=folds_kndm$clusters
kndm_folds
x=kndm_folds[[1]]
fdf <- data.frame(f=x)
ctrl <- CAST::CreateSpacetimeFolds(fdf, spacevar=1, k = max(fdf))
kndm_ctrl <- trainControl(method="cv",
index=ctrl$index,
indexOut=ctrl$indexOut,
savePredictions=TRUE)
kndm_out_mod <- suppressWarnings( # train() can't compute R2
train(form, data=traindf, method="rf",
trControl=kndm_ctrl, tuneGrid=pgrid, ntree=100))
kndm_stats <- kndm_out_mod$pred %>%
summarise(RMSE = sqrt(mean((obs-pred)^2)),
MAE = mean(abs(obs-pred)),
R2 = cor(obs, pred)^2)
names(kndm_stats) <- paste0(names(kndm_stats), "_kndm")
kndm_stats
kndm_stats <- lapply(kndm_folds$clusters, function(x) {
fdf <- data.frame(f=x)
ctrl <- CAST::CreateSpacetimeFolds(fdf, spacevar=1, k = max(fdf))
kndm_ctrl <- trainControl(method="cv",
index=ctrl$index,
indexOut=ctrl$indexOut,
savePredictions=TRUE)
kndm_out_mod <- suppressWarnings( # train() can't compute R2
train(form, data=traindf, method="rf",
trControl=kndm_ctrl, tuneGrid=pgrid, ntree=100))
kndm_stats <- kndm_out_mod$pred %>%
summarise(RMSE = sqrt(mean((obs-pred)^2)),
MAE = mean(abs(obs-pred)),
R2 = cor(obs, pred)^2)
names(kndm_stats) <- paste0(names(kndm_stats), "_kndm")
kndm_stats
})
kndm_stats
kndm_folds
kndm_stats <- lapply(kndm_folds, function(x) {
fdf <- data.frame(f=x)
ctrl <- CAST::CreateSpacetimeFolds(fdf, spacevar=1, k = max(fdf))
kndm_ctrl <- trainControl(method="cv",
index=ctrl$index,
indexOut=ctrl$indexOut,
savePredictions=TRUE)
kndm_out_mod <- suppressWarnings( # train() can't compute R2
train(form, data=traindf, method="rf",
trControl=kndm_ctrl, tuneGrid=pgrid, ntree=100))
kndm_stats <- kndm_out_mod$pred %>%
summarise(RMSE = sqrt(mean((obs-pred)^2)),
MAE = mean(abs(obs-pred)),
R2 = cor(obs, pred)^2)
names(kndm_stats) <- paste0(names(kndm_stats), "_kndm")
kndm_stats
})
kndm_stats
#' Fits a RF model and evaluates it using different kNNDM configurations and sample point distributions.
#' @details
#' Fits a RF model and evaluates it using kNNDM 10-fold CV in different configurations and true errors.
#' @param form String. Model formula.
#' @param kndm_folds list. Indices for kndm CV.
#' @param pgrid Data frame. Parameter grid of the model.
#' @param traindf Data frame. Training data to fit the model.
#' @param surfdf Data frame. Surface data.
fitval_rf_species <- function(form,
kndm_folds,
pgrid, traindf,
surfdf) {
# Validate with random CV and compute metrics
r_cntrl <- trainControl(method="CV", savePredictions=TRUE)
rand_mod <- train(form, data=traindf, method="rf",
trControl=r_cntrl, tuneGrid=pgrid, ntree=100)
rand_stats <- rand_mod$pred %>%
summarise(RMSE = sqrt(mean((obs-pred)^2)),
MAE = mean(abs(obs-pred)),
R2 = cor(obs, pred)^2)
names(rand_stats) <- paste0(names(rand_stats), "_rand")
# Compute CV statistics in surface
surfdf$preds <- predict(rand_mod, newdata=surfdf)
surf_stats <- surfdf %>%
summarise(RMSE = sqrt(mean((outcome-preds)^2)),
MAE = mean(abs(outcome-preds)),
R2 = cor(outcome, preds)^2)
names(surf_stats) <- paste0(names(surf_stats), "_surf")
# Validate with knndm
if (class(kndm_folds)=="list") {
kndm_stats <- lapply(kndm_folds, function(x) {
fdf <- data.frame(f=x)
ctrl <- CAST::CreateSpacetimeFolds(fdf, spacevar=1, k = max(fdf))
kndm_ctrl <- trainControl(method="cv",
index=ctrl$index,
indexOut=ctrl$indexOut,
savePredictions=TRUE)
kndm_out_mod <- suppressWarnings( # train() can't compute R2
train(form, data=traindf, method="rf",
trControl=kndm_ctrl, tuneGrid=pgrid, ntree=100))
kndm_stats <- kndm_out_mod$pred %>%
summarise(RMSE = sqrt(mean((obs-pred)^2)),
MAE = mean(abs(obs-pred)),
R2 = cor(obs, pred)^2)
names(kndm_stats) <- paste0(names(kndm_stats), "_kndm")
kndm_stats
})
kndm_stats <- do.call(rbind, kndm_stats)
} else {
fdf <- data.frame(f=kndm_folds)
ctrl <- CAST::CreateSpacetimeFolds(fdf, spacevar=1, k = max(fdf))
kndm_ctrl <- trainControl(method="cv",
index=ctrl$index,
indexOut=ctrl$indexOut,
savePredictions=TRUE)
kndm_out_mod <- suppressWarnings( # train() can't compute R2
train(form, data=traindf, method="rf",
trControl=kndm_ctrl, tuneGrid=pgrid, ntree=100))
kndm_stats <- kndm_out_mod$pred %>%
summarise(RMSE = sqrt(mean((obs-pred)^2)),
MAE = mean(abs(obs-pred)),
R2 = cor(obs, pred)^2)
names(kndm_stats) <- paste0(names(kndm_stats), "_kndm")
kndm_stats
}
kndm_stats_diff <- data.frame(
RMSE_surf = surf_stats$RMSE_surf, R2_surf = surf_stats$R2_surf, MAE_surf = surf_stats$MAE_surf,
RMSE_kndm = kndm_stats$RMSE_kndm, R2_kndm = kndm_stats$R2_kndm, MAE_kndm = kndm_stats$MAE_kndm)
kndm_stats_diff
}
#### Model fitting and validation
mod <- fitval_rf_species(form,
folds_kndm$clusters,
pgrid, train_data,
grid_data)
mod_all <- cbind(mod, data.frame(WS=folds_kndm$W))
mod_all
# Load utils, functions, and define number of iterations
source("code/simulation/sim_functions_W.R")
sims <- pbreplicate(nsim, sim_species(wgrid, wclim, spoly), simplify=FALSE)
sims
#-----------------------------------------------------------#
#             Simulation analysis: virtual species          #
#-----------------------------------------------------------#
#.libPaths("/home/j/jlinnenb/r_packages/")
library("parallel")
library("doParallel")
library("pbapply")
setwd("C:/git/kNNDM_paper/")
# Load utils, functions, and define number of iterations
source("code/simulation/sim_functions_W.R")
nsim <- 10
pboptions(type = "timer")
# Read data
spoly <- st_read(dsn="data/simulation/species_vdata.gpkg", layer="sampling_polygon")
wclim <- rast("data/simulation/species_stack.grd")
wgrid <- st_read(dsn="data/simulation/species_vdata.gpkg", layer="landscape_grid")
# Prepare parallelization
print(paste0("Process started with ", 11, " cores."))
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# Launch simulation
set.seed(1234)
sims <- pbreplicate(nsim, sim_species(wgrid, wclim, spoly), simplify=FALSE)
# We're done
stopCluster(cl)
rm("cl")
write_csv(do.call(rbind, sims), "results/simulation/W_res.csv")
write_csv(do.call(rbind, sims), "results/W_res.csv")
library(ggplot2)
library(cowplot)
cor_res <- read.csv("results/W_res.csv")
cor_diff <- data.frame(rmse_diff = cor_res$RMSE_kndm - cor_res$RMSE_surf,
r2_diff = cor_res$R2_kndm - cor_res$R2_surf,
mae_diff = cor_res$MAE_kndm - cor_res$MAE_surf,
ws = cor_res$WS,
dsample = cor_res$dsample)
m <- 0.5
b.size <- 20
lm_rmse <- lm(abs(rmse_diff)~ws, cor_diff)
r2_rmse <- round(summary(lm_rmse)$r.squared,2)
pred_rmse <- predict(lm_rmse, cor_diff)
lm_mae <- lm(abs(mae_diff)~ws, cor_diff)
r2_mae <- round(summary(lm_mae)$r.squared,2)
pred_mae <- predict(lm_mae, cor_diff)
lm_r2 <- lm(abs(r2_diff)~ws, cor_diff)
r2_r2 <- round(summary(lm_r2)$r.squared,2)
pred_r2 <- predict(lm_r2, cor_diff)
rmse <- ggplot(data=cor_diff, aes(x=ws,y=abs(rmse_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_rmse), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~RMSE))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(unit(rep(m,4), "cm")))
mae <- ggplot(data=cor_diff, aes(x=ws,y=abs(mae_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_mae), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~MAE))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(rep(m,4), "cm"))
r2 <- ggplot(data=cor_diff, aes(x=ws,y=abs(r2_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_r2), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~R^2))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(unit(rep(m,4), "cm")))
legend_bottom <- get_legend(rmse +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom",
legend.key.width  = unit(1.5, "cm"),
legend.key.height  = unit(0.5, "cm"),
plot.margin = unit(c(0, 0, 0, 0), "cm")))
top_row <- plot_grid(rmse, r2, mae, nrow=1, align="hv")
c <- plot_grid(top_row, NULL, legend_bottom, NULL, nrow=4,
rel_heights = c(1,-0.35,1,-0.4), rel_widths = c(1,1,5,1))
ggsave("figures/4_results_W_err.pdf",c, height=5, width=12)
#
warnings()
# We're done
stopCluster(cl)
rm("cl")
#-----------------------------------------------------------#
#             Simulation analysis: virtual species          #
#-----------------------------------------------------------#
#.libPaths("/home/j/jlinnenb/r_packages/")
library("parallel")
library("doParallel")
library("pbapply")
setwd("C:/git/kNNDM_paper/")
# Load utils, functions, and define number of iterations
source("code/simulation/sim_functions_W.R")
nsim <- 10
pboptions(type = "timer")
# Read data
spoly <- st_read(dsn="data/simulation/species_vdata.gpkg", layer="sampling_polygon")
wclim <- rast("data/simulation/species_stack.grd")
wgrid <- st_read(dsn="data/simulation/species_vdata.gpkg", layer="landscape_grid")
# Prepare parallelization
print(paste0("Process started with ", 11, " cores."))
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# Launch simulation
set.seed(1234)
sims <- pbreplicate(nsim, sim_species(wgrid, wclim, spoly), simplify=FALSE)
#-----------------------------------------------------------#
#             Simulation analysis: virtual species          #
#-----------------------------------------------------------#
#.libPaths("/home/j/jlinnenb/r_packages/")
library("parallel")
library("doParallel")
library("pbapply")
setwd("C:/git/kNNDM_paper/")
# Load utils, functions, and define number of iterations
source("code/simulation/sim_functions_W.R")
nsim <- 10
pboptions(type = "timer")
# Read data
spoly <- st_read(dsn="data/simulation/species_vdata.gpkg", layer="sampling_polygon")
wclim <- rast("data/simulation/species_stack.grd")
wgrid <- st_read(dsn="data/simulation/species_vdata.gpkg", layer="landscape_grid")
# Prepare parallelization
print(paste0("Process started with ", 11, " cores."))
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# Launch simulation
set.seed(1234)
sims <- pbreplicate(nsim, sim_species(wgrid, wclim, spoly), simplify=FALSE)
# We're done
stopCluster(cl)
rm("cl")
write_csv(do.call(rbind, sims), "results/sim_res_W.csv")
library(ggplot2)
library(cowplot)
cor_res <- read.csv("results/sim_res_W.csv")
cor_diff <- data.frame(rmse_diff = cor_res$RMSE_kndm - cor_res$RMSE_surf,
r2_diff = cor_res$R2_kndm - cor_res$R2_surf,
mae_diff = cor_res$MAE_kndm - cor_res$MAE_surf,
ws = cor_res$WS,
dsample = cor_res$dsample)
m <- 0.5
b.size <- 20
lm_rmse <- lm(abs(rmse_diff)~ws, cor_diff)
r2_rmse <- round(summary(lm_rmse)$r.squared,2)
pred_rmse <- predict(lm_rmse, cor_diff)
lm_mae <- lm(abs(mae_diff)~ws, cor_diff)
r2_mae <- round(summary(lm_mae)$r.squared,2)
pred_mae <- predict(lm_mae, cor_diff)
lm_r2 <- lm(abs(r2_diff)~ws, cor_diff)
r2_r2 <- round(summary(lm_r2)$r.squared,2)
pred_r2 <- predict(lm_r2, cor_diff)
rmse <- ggplot(data=cor_diff, aes(x=ws,y=abs(rmse_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_rmse), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~RMSE))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(unit(rep(m,4), "cm")))
mae <- ggplot(data=cor_diff, aes(x=ws,y=abs(mae_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_mae), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~MAE))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(rep(m,4), "cm"))
r2 <- ggplot(data=cor_diff, aes(x=ws,y=abs(r2_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_r2), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~R^2))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(unit(rep(m,4), "cm")))
legend_bottom <- get_legend(rmse +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom",
legend.key.width  = unit(1.5, "cm"),
legend.key.height  = unit(0.5, "cm"),
plot.margin = unit(c(0, 0, 0, 0), "cm")))
top_row <- plot_grid(rmse, r2, mae, nrow=1, align="hv")
c <- plot_grid(top_row, NULL, legend_bottom, NULL, nrow=4,
rel_heights = c(1,-0.35,1,-0.4), rel_widths = c(1,1,5,1))
ggsave("figures/4_results_W_err.pdf",c, height=5, width=12)
getwd()
ggsave("figures/4_results_W_err.pdf",c, height=5, width=12)
ggsave("figures/4_results_W_err.pdf",c, height=5, width=12)
#-----------------------------------------------------------#
#             Simulation analysis: virtual species          #
#-----------------------------------------------------------#
#.libPaths("/home/j/jlinnenb/r_packages/")
library("parallel")
library("doParallel")
library("pbapply")
setwd("C:/git/kNNDM_paper/")
# Load utils, functions, and define number of iterations
source("code/simulation/sim_functions_W.R")
nsim <- 100
pboptions(type = "timer")
# Read data
spoly <- st_read(dsn="data/simulation/species_vdata.gpkg", layer="sampling_polygon")
wclim <- rast("data/simulation/species_stack.grd")
wgrid <- st_read(dsn="data/simulation/species_vdata.gpkg", layer="landscape_grid")
nsim <- 1
# Prepare parallelization
print(paste0("Process started with ", 11, " cores."))
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# Launch simulation
set.seed(1234)
sims <- pbreplicate(nsim, sim_species(wgrid, wclim, spoly), simplify=FALSE)
sims
nrows(sims)
nrow(sims)
class(sims)
nrow(sims[[1]])
45+15+30+60+30+30
library(ggplot2)
library(cowplot)
cor_res <- read.csv("results/sim_res_W.csv")
cor_diff <- data.frame(rmse_diff = cor_res$RMSE_kndm - cor_res$RMSE_surf,
r2_diff = cor_res$R2_kndm - cor_res$R2_surf,
mae_diff = cor_res$MAE_kndm - cor_res$MAE_surf,
ws = cor_res$WS,
dsample = cor_res$dsample)
m <- 0.5
b.size <- 20
lm_rmse <- lm(abs(rmse_diff)~ws, cor_diff)
r2_rmse <- round(summary(lm_rmse)$r.squared,2)
pred_rmse <- predict(lm_rmse, cor_diff)
lm_mae <- lm(abs(mae_diff)~ws, cor_diff)
r2_mae <- round(summary(lm_mae)$r.squared,2)
pred_mae <- predict(lm_mae, cor_diff)
lm_r2 <- lm(abs(r2_diff)~ws, cor_diff)
r2_r2 <- round(summary(lm_r2)$r.squared,2)
pred_r2 <- predict(lm_r2, cor_diff)
rmse <- ggplot(data=cor_diff, aes(x=ws,y=abs(rmse_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_rmse), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~RMSE))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(unit(rep(m,4), "cm")))
mae <- ggplot(data=cor_diff, aes(x=ws,y=abs(mae_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_mae), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~MAE))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(rep(m,4), "cm"))
r2 <- ggplot(data=cor_diff, aes(x=ws,y=abs(r2_diff))) +
geom_bin_2d(bins=30) +
geom_line(aes(y=pred_r2), col="black", linewidth=1.2) +
scale_fill_viridis_b(trans="log10") +
scale_x_continuous(n.breaks = 3,labels = function(x) format(x, scientific = FALSE)) +
ylab(expression(abs(CV - true~R^2))) +
xlab("W") +
theme_bw(base_size=b.size) +
theme(aspect.ratio=1, legend.position = NaN,
plot.margin = unit(unit(rep(m,4), "cm")))
legend_bottom <- get_legend(rmse +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom",
legend.key.width  = unit(1.5, "cm"),
legend.key.height  = unit(0.5, "cm"),
plot.margin = unit(c(0, 0, 0, 0), "cm")))
top_row <- plot_grid(rmse, r2, mae, nrow=1, align="hv")
c <- plot_grid(top_row, NULL, legend_bottom, NULL, nrow=4,
rel_heights = c(1,-0.35,1,-0.4), rel_widths = c(1,1,5,1))
ggsave("figures/4_results_W_err.pdf",c, height=5, width=12)
#
print("Rsquared for " r2_rmse)
print(paste("Rsquared for Rsquared:", r2_rmse))
print(paste("Rsquared for Rsquared:", r2_r2, ";\n",
"Rsquared for MAE:", r2_mae, ";\n",
"Rsquared for RMSE:" r2_rmse))
print(paste("Rsquared for Rsquared:", r2_r2, "\n",
"Rsquared for MAE:", r2_mae, "\n",
"Rsquared for RMSE:", r2_rmse))
print(paste("Rsquared for Rsquared:", r2_r2, \n,
print(paste("Rsquared for Rsquared:", r2_r2, ";",
"Rsquared for MAE:", r2_mae, ";",
"Rsquared for RMSE:", r2_rmse))
cor_diff
cor_diff[rowSums(is.na(cor_diff)) > 0,]
cor_res[rowSums(is.na(cor_res)) > 0,]
cor_res$RMSE_kndm
cor_res$MAE_kndm
plot(rmse_diff~ws, data=cor_diff)
plot(abs(rmse_diff)~ws, data=cor_diff)
plot(abs(r2_diff)~ws, data=cor_diff)
plot(abs(rmse)~ws, data=cor_diff)
plot(abs(rmse_diff)~ws, data=cor_diff)
plot(abs(mae_diff)~ws, data=cor_diff)
